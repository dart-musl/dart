name: build

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  configure:
    name: Configure

    runs-on: ubuntu-latest

    outputs:
      dart_version: ${{ steps.configure.outputs.dart_version }}
      dart_bootstrap_version: ${{ steps.configure.outputs.dart_bootstrap_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure
        id: configure
        run: |
          DART_VERSION=$(cat version)
          DART_BOOTSTRAP_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/dart-lang/sdk/$DART_VERSION/DEPS" | grep -F '"sdk_tag":' | cut -d '"' -f 4 | cut -d ':' -f 2)
          echo "dart_version=$DART_VERSION" | tee -a $GITHUB_OUTPUT
          echo "dart_bootstrap_version=$DART_BOOTSTRAP_VERSION" | tee -a $GITHUB_OUTPUT

  bootstrap:
    name: Bootstrap ${{ needs.configure.outputs.dart_bootstrap_version }} (${{ matrix.target_arch }})

    needs: [configure]

    runs-on: ubuntu-latest

    container:
      image: debian:11

    strategy:
      fail-fast: false
      matrix:
        include:
          - host_arch: x64
            target_arch: x64

    steps:
      - name: Cache
        id: cache
        uses: actions/cache@v3
        with:
          key: dartsdk-linux-${{ matrix.target_arch }}-${{ needs.configure.outputs.dart_bootstrap_version }}
          path: dartsdk-linux-${{ matrix.target_arch }}-release.tar.gz

      - name: Install build tools
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          apt-get update
          apt-get install --no-install-recommends -y ca-certificates curl git python3 xz-utils

      - name: Download Dart SDK
        id: download
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          if curl -fsSLo dartsdk-linux-${{ matrix.target_arch }}-release.tar.gz https://github.com/dart-musl/dart/releases/download/${{ needs.configure.outputs.dart_bootstrap_version }}/dartsdk-linux-${{ matrix.target_arch }}-release.tar.gz; then
            echo "cache-hit=true" | tee -a $GITHUB_OUTPUT
          else
            echo "cache-hit=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Fetch Dart SDK
        if: steps.cache.outputs.cache-hit != 'true' && steps.download.outputs.cache-hit != 'true'
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export DEPOT_TOOLS_UPDATE=0 PATH=$PWD/depot_tools:$PATH

          mkdir dart-sdk
          cd dart-sdk
          tee .gclient <<'EOF'
          solutions = [{
            'name': 'sdk',
            'url': 'https://dart.googlesource.com/sdk.git@${{ needs.configure.outputs.dart_bootstrap_version }}',
          }]
          EOF
          gclient sync --no-history

      - name: Build
        if: steps.cache.outputs.cache-hit != 'true' && steps.download.outputs.cache-hit != 'true'
        run: |
          cd dart-sdk/sdk
          ./tools/build.py --no-goma --mode release --arch ${{ matrix.target_arch }} --gn-args 'dart_use_tcmalloc=false' create_sdk

      - name: Archive
        if: steps.cache.outputs.cache-hit != 'true' && steps.download.outputs.cache-hit != 'true'
        run: |
          tar -czf dartsdk-linux-${{ matrix.target_arch }}-release.tar.gz -C dart-sdk/sdk/out/Release* -- dart-sdk

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dartsdk-linux-${{ matrix.target_arch }}-${{ needs.configure.outputs.dart_bootstrap_version }}
          path: dartsdk-linux-${{ matrix.target_arch }}-release.tar.gz
          if-no-files-found: error

  archive:
    name: Archive ${{ needs.configure.outputs.dart_version }}

    needs: [configure]

    runs-on: ubuntu-latest

    container:
      image: debian:11

    steps:
      - name: Install build tools
        run: |
          apt-get update
          apt-get install --no-install-recommends -y ca-certificates curl git python3

      - name: Fetch Dart SDK
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export DEPOT_TOOLS_UPDATE=0 PATH=$PWD/depot_tools:$PATH

          mkdir dart-sdk
          cd dart-sdk
          tee .gclient <<'EOF'
          solutions = [{
            'name': 'sdk',
            'url': 'https://dart.googlesource.com/sdk.git@${{ needs.configure.outputs.dart_version }}',
          }]
          EOF
          gclient sync --no-history --nohooks
          python3 sdk/tools/generate_package_config.py
          python3 sdk/tools/generate_sdk_version_file.py

      - name: Patch Dart SDK
        if: startsWith(needs.configure.outputs.dart_version, '2.19.')
        run: |
          cd dart-sdk/sdk
          curl -fsSLo ../0001.diff https://github.com/dart-lang/sdk/commit/afe921902609e95e5050dad1fe82d2a69bcdcf95.diff
          curl -fsSLo ../0002.diff https://patch-diff.githubusercontent.com/raw/dart-lang/sdk/pull/51057.diff
          git apply ../*.diff

      - name: Remove build tools
        run: |
          cd dart-sdk/sdk
          rm -rf buildtools
          mkdir -p buildtools/ninja
          ln -s /usr/bin/gn buildtools/gn
          ln -s /usr/bin/ninja buildtools/ninja/ninja

      - name: Remove Bootstrap Dart SDK
        run: |
          cd dart-sdk/sdk
          rm -rf tools/sdks/dart-sdk

      - name: Archive
        run: |
          python3 dart-sdk/sdk/tools/linux_dist_support/create_tarball.py --tar_filename dart-${{ needs.configure.outputs.dart_version }}.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dart-${{ needs.configure.outputs.dart_version }}
          path: dart-${{ needs.configure.outputs.dart_version }}.tar.gz
          if-no-files-found: error

  build:
    name: Build ${{ needs.configure.outputs.dart_version }} (${{ matrix.target_arch }})

    needs: [configure, bootstrap, archive]

    runs-on: ubuntu-latest

    container:
      image: alpine:3

    strategy:
      fail-fast: false
      matrix:
        include:
          - host_arch: x64
            target_arch: x64
          - host_arch: x64
            target_arch: ia32
          - host_arch: x64
            target_arch: arm64
          - host_arch: x64
            target_arch: arm

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: dart-${{ needs.configure.outputs.dart_version }}

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: dartsdk-linux-${{ matrix.host_arch }}-${{ needs.configure.outputs.dart_bootstrap_version }}

      - name: Unarchive
        run: |
          mkdir dart-sdk
          cd dart-sdk
          tar -xzf ../dart-${{ needs.configure.outputs.dart_version }}.tar.gz --strip-components=1
          mv dart sdk
          tar -xzf ../dartsdk-linux-${{ matrix.host_arch }}-release.tar.gz -C sdk/tools/sdks
          rm -f ../*.tar.gz

      - name: Install build tools
        run: |
          apk add --no-cache alpine-sdk bash clang curl gn lld llvm python3

      - name: Install sysroot
        run: |
          cd dart-sdk/sdk
          ./build/linux/alpine_sysroot_scripts/install-sysroot.sh

      - name: Configure TCMalloc
        run: |
          apk add --no-cache autoconf automake libtool
          cd dart-sdk/sdk/third_party/tcmalloc/gperftools
          CFLAGS=-D_GNU_SOURCE sh ../configure_command
          cp src/config.h ../include/config.h
          cp src/tcmalloc.h ../gperftools/tcmalloc.h
          echo
          cat src/config.h

      - name: Setup multiarch musl
        run: |
          cd dart-sdk/sdk
          find build/linux -mindepth 1 -maxdepth 1 -name 'alpine-*-sysroot' -print0 | xargs -0 -n 1 -I {} -- find {}/lib -mindepth 1 -maxdepth 1 \( -name 'ld-musl-*.so.1' -o -name 'libc.musl-*.so.1' \) -print0 | xargs -0 -n 1 -- sh -xc 'cp -u "$1" /lib' --

      - name: Check Bootstrap SDK
        run: |
          cd dart-sdk/sdk
          if ! ./tools/sdks/dart-sdk/bin/dart --version; then
            apk add --no-cache gcompat
            ./tools/sdks/dart-sdk/bin/dart --version
          fi

      - name: Build
        run: |
          cd dart-sdk/sdk
          ./tools/build.py --no-goma --mode release --arch ${{ matrix.target_arch }} --gn-args 'dart_snapshot_kind="app-jit"' --gn-args 'dart_sysroot="alpine"' create_sdk

      - name: Archive
        run: |
          tar -czf dartsdk-linux-${{ matrix.target_arch }}-release.tar.gz -C dart-sdk/sdk/out/Release* -- dart-sdk

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dartsdk-linux-${{ matrix.target_arch }}-${{ needs.configure.outputs.dart_version }}
          path: dartsdk-linux-${{ matrix.target_arch }}-release.tar.gz
          if-no-files-found: error

  release:
    name: Release

    if: github.event.repository.fork == false && startsWith(github.ref, 'refs/tags/')

    needs: [configure, build]

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: dartsdk-linux-x64-${{ needs.configure.outputs.dart_version }}

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: dartsdk-linux-ia32-${{ needs.configure.outputs.dart_version }}

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: dartsdk-linux-arm64-${{ needs.configure.outputs.dart_version }}

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: dartsdk-linux-arm-${{ needs.configure.outputs.dart_version }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dartsdk-linux-x64-release.tar.gz
            dartsdk-linux-ia32-release.tar.gz
            dartsdk-linux-arm64-release.tar.gz
            dartsdk-linux-arm-release.tar.gz

  release-container:
    name: Release Container

    if: github.event.repository.fork == false && startsWith(github.ref, 'refs/tags/')

    needs: [release]

    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=edge
            type=ref,event=branch
            type=ref,event=pr
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          build-args: |
            BASEURL=${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}
          context: .
          platforms: linux/amd64,linux/arm64,linux/386,linux/arm/v7
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
