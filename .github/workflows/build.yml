name: build

on:
  workflow_call:
    inputs:
      ref:
        description: Dart SDK git ref
        required: true
        type: string
  workflow_dispatch:
    inputs:
      ref:
        description: Dart SDK git ref
        required: true
        type: string
        default: main

jobs:
  archive:
    runs-on: ubuntu-latest

    container:
      image: docker.io/library/debian

    strategy:
      fail-fast: false
      matrix:
        include:
          - host-arch: x64

    steps:
      - name: Install build tools
        run: |
          apt-get update
          apt-get install --no-install-recommends -y ca-certificates curl git python3

      - name: Fetch Dart SDK
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export DEPOT_TOOLS_UPDATE=0 PATH=$PWD/depot_tools:$PATH

          mkdir dart-sdk
          cd dart-sdk
          gclient config --name sdk https://dart.googlesource.com/sdk.git@${{ inputs.ref }}
          gclient sync --no-history --nohooks
          python3 sdk/tools/generate_package_config.py
          python3 sdk/tools/generate_sdk_version_file.py

      - name: Patch perfetto
        run: |
          cd dart-sdk/sdk
          if grep -q cstdint third_party/perfetto/include/perfetto/ext/base/uuid.h; then
            exit 0
          fi

          xargs -n 1 -- sh -xc 'curl -fsSL "https://github.com/google/perfetto/commit/$1.diff" | git apply --directory third_party/perfetto -' -- <<'EOF'
            07b15988f07b9d2c4019c61e7ec5b372a8daa81a
          EOF

      - name: Get Checked-in Dart SDK Version
        id: version
        run: |
          tee /tmp/version.dart <<'EOF'
          import 'dart:io' show Platform;
          void main() {
            print('version=' + Platform.version.split(' ')[0]);
          }
          EOF
          cd dart-sdk/sdk
          ./tools/sdks/dart-sdk/bin/dart run /tmp/version.dart | tee -a $GITHUB_OUTPUT

      - name: Fetch Checked-in Dart SDK
        run: |
          if curl -fsSLO ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/dartsdk-linux-${{ matrix.host-arch }}-release.tar.gz; then
            rm -rf dart-sdk/sdk/tools/sdks/dart-sdk
            tar -xzf dartsdk-linux-${{ matrix.host-arch }}-release.tar.gz -C dart-sdk/sdk/tools/sdks
          fi

      - name: Remove build tools
        run: |
          cd dart-sdk/sdk
          rm -rf buildtools
          mkdir -p buildtools/ninja
          ln -s /usr/bin/gn buildtools/gn
          ln -s /usr/bin/ninja buildtools/ninja/ninja

      - name: Archive
        run: |
          python3 dart-sdk/sdk/tools/linux_dist_support/create_tarball.py --tar_filename dart-${{ inputs.ref }}-${{ matrix.host-arch }}.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dart-${{ inputs.ref }}-${{ matrix.host-arch }}
          path: dart-${{ inputs.ref }}-${{ matrix.host-arch }}.tar.gz
          if-no-files-found: error

  build:
    needs: [archive]

    runs-on: ubuntu-latest

    container:
      image: docker.io/library/alpine:${{ matrix.target-arch == 'riscv64' && 'edge' || 'latest' }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - host-arch: x64
            target-arch: x64
          - host-arch: x64
            target-arch: ia32
          - host-arch: x64
            target-arch: arm64
          - host-arch: x64
            target-arch: arm
          - host-arch: x64
            target-arch: riscv64

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: dart-${{ inputs.ref }}-${{ matrix.host-arch }}

      - name: Unarchive
        run: |
          mkdir dart-sdk
          cd dart-sdk
          tar -xzf ../dart-${{ inputs.ref }}-${{ matrix.host-arch }}.tar.gz --strip-components=1
          mv dart sdk

      - name: Verify Checked-in Dart SDK
        run: |
          cd dart-sdk/sdk
          if ! ./tools/sdks/dart-sdk/bin/dart --version; then
            apk add --no-cache gcompat
            ./tools/sdks/dart-sdk/bin/dart --version
          fi

      - name: Install build tools
        run: |
          apk add --no-cache alpine-sdk bash clang curl gn lld llvm python3

      - name: Install default sysroots
        run: |
          cd dart-sdk/sdk
          ./build/linux/alpine_sysroot_scripts/install-sysroot.sh

      - name: Install riscv64 sysroot
        if: matrix.target-arch == 'riscv64'
        run: |
          cd dart-sdk/sdk
          ./build/linux/alpine_sysroot_scripts/install-sysroot.sh riscv64

      - name: Fix riscv64 sysroot
        if: matrix.target-arch == 'riscv64'
        run: |
          xargs -n 1 -I {} wget https://github.com/dart-musl/dl-cdn.alpinelinux.org/raw/main/alpine/edge/main/riscv64/{} <<'EOF'
            g++-13.1.1_git20230722-r1.apk
            gcc-13.1.1_git20230722-r1.apk
            libatomic-13.1.1_git20230722-r1.apk
            libgcc-13.1.1_git20230722-r1.apk
            libgomp-13.1.1_git20230722-r1.apk
            libstdc++-13.1.1_git20230722-r1.apk
            libstdc++-dev-13.1.1_git20230722-r1.apk
          EOF
          find . -mindepth 1 -maxdepth 1 -name '*-13.1.1_git20230722-r1.apk' -print0 | xargs -0 apk add --root "$GITHUB_WORKSPACE/dart-sdk/sdk/build/linux/alpine-linux-riscv64-sysroot" --allow-untrusted --no-scripts --

      - name: Setup multiarch musl
        run: |
          cd dart-sdk/sdk
          find build/linux -mindepth 1 -maxdepth 1 -name 'alpine-*-sysroot' -print0 | xargs -0 -n 1 -I {} -- find {}/lib -mindepth 1 -maxdepth 1 \( -name 'ld-musl-*.so.1' -o -name 'libc.musl-*.so.1' \) -print0 | xargs -0 -n 1 -- sh -xc 'cp -u "$1" /lib' --

      - name: Build
        run: |
          cd dart-sdk/sdk
          ./tools/build.py --no-goma --mode release --arch ${{ matrix.target-arch }} --gn-args 'dart_snapshot_kind="app-jit"' --gn-args 'dart_sysroot="alpine"' create_sdk

      - name: Archive
        run: |
          tar -czf dartsdk-linux-${{ matrix.target-arch }}-release.tar.gz -C dart-sdk/sdk/out/Release* -- dart-sdk

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dartsdk-linux-${{ matrix.target-arch }}-${{ inputs.ref }}
          path: dartsdk-linux-${{ matrix.target-arch }}-release.tar.gz
          if-no-files-found: error

  tag:
    needs: [build]

    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Tag
        run: |
          if git ls-remote --exit-code --tags https://dart.googlesource.com/sdk.git "${{ inputs.ref }}"; then
            git config user.email 41898282+github-actions[bot]@users.noreply.github.com
            git config user.name github-actions[bot]
            if test -n "$(git tag -l ${{ inputs.ref }})"; then
              echo "Tag ${{ inputs.ref }} has already been created."
              exit 0
            fi
            git tag -m ${{ inputs.ref }} ${{ inputs.ref }}
            echo "Tagged ${{ inputs.ref }}."
            git push origin refs/tags/${{ inputs.ref }}
            echo "Pushed tag ${{ inputs.ref }}."
          fi
