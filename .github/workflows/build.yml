name: build

on:
  workflow_call:
    inputs:
      ref:
        description: Dart SDK git ref
        required: true
        type: string
  workflow_dispatch:
    inputs:
      ref:
        description: Dart SDK git ref
        required: true
        type: string
        default: main

jobs:
  archive:
    runs-on: ${{ matrix.os }}

    container:
      image: docker.io/library/debian

    strategy:
      fail-fast: false
      matrix:
        include:
          - host-arch: x64
            os: ubuntu-latest
          - host-arch: arm64
            os: ubuntu-24.04-arm

    steps:
      - name: Install build tools
        run: |
          apt-get update
          apt-get install --no-install-recommends -y ca-certificates curl git python3
          curl -fsSLo /etc/apt/keyrings/githubcli-archive-keyring.gpg https://cli.github.com/packages/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list
          apt-get update
          apt-get install --no-install-recommends -y gh

      - name: Fetch Dart SDK
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export DEPOT_TOOLS_UPDATE=0 PATH=$PWD/depot_tools:$PATH

          mkdir dart-sdk
          cd dart-sdk
          gclient config --name sdk https://dart.googlesource.com/sdk.git@${{ inputs.ref }}
          gclient sync --no-history

      - name: Get Checked-in Dart SDK Version
        id: version
        run: |
          tee /tmp/version.dart <<'EOF'
          import 'dart:io' show Platform;
          void main() {
            print('version=' + Platform.version.split(' ')[0]);
          }
          EOF
          dart-sdk/sdk/tools/sdks/dart-sdk/bin/dart run /tmp/version.dart | tee -a "$GITHUB_OUTPUT"

      - name: Fetch Checked-in Dart SDK
        run: |
          if curl -fsSLO ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/dartsdk-linux-${{ matrix.host-arch }}-release.tar.gz; then
            gh attestation verify dartsdk-linux-${{ matrix.host-arch }}-release.tar.gz --repo ${{ github.repository }} --signer-workflow ${{ github.repository }}/.github/workflows/build.yml@refs/tags/${{ steps.version.outputs.version }}
            rm -rf dart-sdk/sdk/tools/sdks/dart-sdk
            tar -xzf dartsdk-linux-${{ matrix.host-arch }}-release.tar.gz -C dart-sdk/sdk/tools/sdks
          else
            gh workflow run build.yml --repo ${{ github.repository }} --raw-field ref=${{ steps.version.outputs.version }}
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Remove build tools
        run: |
          cd dart-sdk/sdk
          rm -rf buildtools
          mkdir -p buildtools/ninja buildtools/sysroot
          ln -s /usr/bin/gn buildtools/gn
          ln -s /usr/bin/ninja buildtools/ninja/ninja

      - name: Archive
        run: |
          python3 dart-sdk/sdk/tools/linux_dist_support/create_tarball.py --tar_filename dart-${{ inputs.ref }}-${{ matrix.host-arch }}.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dart-${{ inputs.ref }}-${{ matrix.host-arch }}
          path: dart-${{ inputs.ref }}-${{ matrix.host-arch }}.tar.gz
          if-no-files-found: error
          compression-level: 0

  build:
    needs: [archive]

    runs-on: ${{ matrix.os }}

    permissions:
      actions: write
      attestations: write
      id-token: write

    container:
      image: docker.io/library/alpine

    strategy:
      fail-fast: false
      matrix:
        include:
          - host-arch: x64
            target-arch: x64
            os: ubuntu-latest
          - host-arch: arm64
            target-arch: arm64
            os: ubuntu-24.04-arm
          - host-arch: x64
            target-arch: arm
            os: ubuntu-latest
          - host-arch: x64
            target-arch: riscv64
            os: ubuntu-latest

    steps:
      - name: Setup node:alpine for JavaScript Actions
        uses: dart-musl/setup-node-alpine-for-javascript-actions@v1

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: dart-${{ inputs.ref }}-${{ matrix.host-arch }}

      - name: Unarchive
        run: |
          mkdir dart-sdk
          cd dart-sdk
          tar -xzf ../dart-${{ inputs.ref }}-${{ matrix.host-arch }}.tar.gz --strip-components=1
          mv dart sdk

      - name: Verify Checked-in Dart SDK
        run: |
          cd dart-sdk/sdk
          if ! ./tools/sdks/dart-sdk/bin/dart --version; then
            apk add --no-cache -- gcompat
            ./tools/sdks/dart-sdk/bin/dart --version
          fi

      - name: Install build tools
        run: |
          apk add --no-cache -- bash clang curl git gn lld llvm python3

      - name: Install sysroots
        run: |
          cd dart-sdk/sdk
          ./build/linux/alpine_sysroot_scripts/install-sysroot.sh

      - name: Install x86 sysroot
        if: matrix.host-arch == 'x64' && matrix.target-arch == 'arm'
        run: |
          cd dart-sdk/sdk
          ./build/linux/alpine_sysroot_scripts/install-sysroot.sh x86

      - name: Setup multiarch
        run: |
          cd dart-sdk/sdk
          find buildtools/sysroot -mindepth 1 -maxdepth 1 -name 'alpine-linux-*' -print0 | xargs -0 -n 1 -I {} -- find {}/lib -mindepth 1 -maxdepth 1 \( -name 'ld-musl-*.so.1' -o -name 'libc.musl-*.so.1' \) -print0 | xargs -0 -n 1 -- sh -xc 'cp -u "$1" /lib' --

      - name: Build
        run: |
          cd dart-sdk/sdk
          ./tools/build.py --mode release --arch ${{ matrix.target-arch }} --gn-args 'dart_snapshot_kind="app-jit"' --gn-args 'dart_sysroot="alpine"' create_sdk

      - name: Archive
        run: |
          tar -czf dartsdk-linux-${{ matrix.target-arch }}-release.tar.gz -C dart-sdk/sdk/out/Release* -- dart-sdk

      - name: Generate artifact attestation
        if: github.ref_type == 'tag'
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: dartsdk-linux-${{ matrix.target-arch }}-release.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dartsdk-linux-${{ matrix.target-arch }}-${{ inputs.ref }}
          path: dartsdk-linux-${{ matrix.target-arch }}-release.tar.gz
          if-no-files-found: error
          compression-level: 0

  tag:
    needs: [build]

    if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Tag
        run: |
          if git ls-remote --exit-code --tags https://dart.googlesource.com/sdk.git "${{ inputs.ref }}"; then
            git config user.email 41898282+github-actions[bot]@users.noreply.github.com
            git config user.name github-actions[bot]
            if test -n "$(git tag -l ${{ inputs.ref }})"; then
              echo "Tag ${{ inputs.ref }} has already been created."
              exit 0
            fi
            git tag -m ${{ inputs.ref }} ${{ inputs.ref }}
            echo "Tagged ${{ inputs.ref }}."
            git push origin refs/tags/${{ inputs.ref }}
            echo "Pushed tag ${{ inputs.ref }}."
          fi
